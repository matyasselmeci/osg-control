#!/usr/bin/python
import optparse
import os
import sys
import time

from subprocess import Popen
from subprocess import PIPE

class InvalidOptionError(Exception): pass
class ServiceError(Exception): pass


# including the following two classes from python 2.7 since RHEL5 and variants 
# don't have them 
# Exception class used by check_output
class CalledProcessError(Exception):
    """This exception is raised when a process run by check_call() or
    check_output() returns a non-zero exit status.
    The exit status will be stored in the returncode attribute;
    check_output() will also store the output in the output attribute.
    """
    def __init__(self, returncode, cmd, output=None):
        self.returncode = returncode
        self.cmd = cmd
        self.output = output
    def __str__(self):
        return "Command '%s' returned non-zero exit status %d" % (self.cmd, self.returncode)

# including this function from python 2.7 since RHEL5 and variants don't have it 
def check_output(*popenargs, **kwargs):
    r"""Run command with arguments and return its output as a byte string.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute and output in the output attribute.

    The arguments are the same as for the Popen constructor.  Example:

    >>> check_output(["ls", "-l", "/dev/null"])
    'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\n'

    The stdout argument is not allowed as it is used internally.
    To capture standard error in the result, use stderr=STDOUT.

    >>> check_output(["/bin/sh", "-c",
    ...               "ls -l non_existent_file ; exit 0"],
    ...              stderr=STDOUT)
    'ls: non_existent_file: No such file or directory\n'
    """
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise CalledProcessError(retcode, cmd, output=output)
    return output

# Class to handle the command line options and/or arguments
class InstallOptions(optparse.OptionParser):
    def __init__(self):
        usage_string = """ %prog action [service] 
%prog --action action [--service service] 

This script is intended to mimic some of the features that the
vdt-control tool provided.  The idea is to provide the ability
to treat all of the services provides by OSG as a single unit
or as individual services.  In other words, if you want to "turn
off" a gatekeeper, you can issue:
    # osg-control stop

This would loop through all the associated services for a
gatekeeper and turns them all off.  You can also specify a service
to perform the action on as well.
    # osg-control stop condor

Valid services are retrieved from osg-configure.
Services that may not be controlled:
  osg-ca-certs-updater-cron osg-cleanup-cron osg-info-services
"""

        optparse.OptionParser.__init__(self, usage=usage_string)

        self.valid_services = []

        opt_help_str = "Action:  The action that the script should perform " \
                       "Valid actions: <%s> [required]" % " ".join(Services.VALID_ACTIONS)
        self.add_option("-a", "--action", dest="action", 
                        type="choice", choices=Services.VALID_ACTIONS,
                        help=opt_help_str)

        opt_help_str = "Service: The service upon which the action will be " \
                       "performed.  If no service is specified then the " \
                       "action will be applied to all configured services." \
                       "[optional]"
        self.add_option("-s", "--service", dest="service", help=opt_help_str)


    def get_services(self):
        """
        Makes a callout to osg-configure to get a list of configured OSG 
        services and populates self.valid_services

        The first and last lines of output are informational and therefore 
        useless, so they are stripped off.

        example output:

            System services associated with current configuration:
            globus-gridftp-server
            globus-gatekeeper
            condor
            fetch-crl-boot
            gratia-probes-cron
            fetch-crl-cron
            tomcat5
            gums-client-cron
            Completed successfully
        """
        command = ["/usr/sbin/osg-configure", "--enabled-services"]
        output = check_output(command)
        output = output.split("\n")
        self.valid_services = output[1:-2]
        self.valid_services.sort()


    def validate_options(self):
        """
        Validates the options passed on the command line.  This program assumes
        that either arguments or options are passed to it.  No mixing of the 
        two are allowed.

        Action is required, and must be one of the actions listed in 
        self.valid_actions.  This is automatically enforced by the option type.

        Service is optional but if specified must be a service listed in
        self.valid_services
        """
        if len(self.args) > 0:
            if self.options.action:
                err_msg = "Cannot have both options and arguments\n\n"
                raise InvalidOptionError(err_msg)
        else: # no args so parse the options
            # action is a "choice" type, so its value will be enforced already,
            # no need to check that here
            if not self.options.action:
                raise InvalidOptionError("Action is a required option\n\n")

            if self.options.service:
                if not (self.options.service in self.valid_services):
                    service_list = ", ".join(self.valid_services)
                    err_msg = "Invalid service specified.\n\n"
                    raise InvalidOptionError(err_msg)

        self.service_action = self.options.action
        self.service_name = self.options.service

    def validate_args(self):
        """
        Validates the arguments passed on the command line.  This program 
        assumes that either arguments or options are passed to it.  No mixing of
        the two are allowed.

        Action is required, and must be one of the actions listed in 
        self.valid_actions

        Service is optional but if specified must be a service listed in
        self.valid_services
        """
        if self.options.action:
            if len(self.args) > 0:
                err_msg = "Cannot have both options and arguments"
                raise InvalidOptionError(err_msg)
        else: # no options so parse the args
            if len(self.args) < 1:
                raise InvalidOptionError("Action is a required argument\n\n")

            # self.args[0] should be the action
            if not (self.args[0] in Services.VALID_ACTIONS):
                action_list = ", ".join(Services.VALID_ACTIONS)
                err_msg = "Invalid action specified.  Valid actions " \
                          "are: %s" % Services.VALID_ACTIONS
                raise InvalidOptionError(err_msg)
            else:
                self.service_action = self.args[0]

            # self.args[1] should be the service, if specified
            try:
                if not (self.args[1] in self.valid_services):
                    service_list = ", ".join(self.valid_services)
                    err_msg = "Invalid service specified.  Valid services " \
                              "are: %s" % service_list
                    raise InvalidOptionError(err_msg)
                else:
                    self.service_name = self.args[1]
            except IndexError:
                # no argument was passed for service so we set 
                # self.service_name = None
                self.service_name = None

    def parse(self):
        """
        Parses the command line and validates the options and arguments passed in
        """
        try:
            self.get_services()

            (options, args) = self.parse_args()
            self.options = options
            self.args = args

            self.validate_options()
            self.validate_args()
        except OSError, ose:
            err_msg = "Unable to find osg-configure.\n\n"
            raise InvalidOptionError(err_msg)
        except CalledProcessError, cpe:
            err_msg = "Unable to retrieve the list of configured services.\n" \
                      "%s" % str(cpe)
            raise InvalidOptionError(err_msg)

class Services(object):
    """
    This class interfaces with SysV init style services.
    """
    VALID_ACTIONS = ["start", "stop", "restart", 
                     "status", "list", 
                     "enable", "disable"]

    def __init__(self, valid_services):
        """
        Sets a list of services that the instance will be allowed to work with

        @type valid_services: list
        @param valid_services: list of services that the instance will be 
        allowed to work with
        """
        self.valid_services = valid_services

    def start(self, service):
        """
        Starts a specified service.  If no service is specified, all services
        listed in self.valid_services will be started.

        @type service: string
        @param service: the service to start

        @return: 0 for success, integer describing number of errors otherwise
        """
        command_template = "/sbin/service %s start"
        errors = self.apply_action(command_template, service)

        return errors

    def stop(self, service):
        """
        Stops a specified service.  If no service is specified, all services
        listed in self.valid_services will be stopped.

        @type service: string
        @param service: the service to stop

        @return: 0 for success, integer describing number of errors otherwise
        """
        command_template = "/sbin/service %s stop"
        errors = self.apply_action(command_template, service)

        return errors

    def restart(self, service):
        """
        Restarts a specified service.  If no service is specified, all services
        listed in self.valid_services will be restarted.  The restart process 
        is a stop, sleep 5 seconds to give the stopped service time to exit 
        cleanly, then a start.

        @type service: string
        @param service: the service to restart

        @return: 0 for success, integer describing number of errors otherwise
        """

        restart_errors = self.apply_action(command_template, service)
        time.sleep(5)
        errors = self.apply_action(command_template, service)
        restart_errors += errors

        return restart_errors

    def enable(self, service):
        """
        Enables a specified service.  If no service is specified, all services
        listed in self.valid_services will be enabled.

        @type service: string
        @param service: the service to enable

        @return: 0 for success, integer describing number of errors otherwise
        """
        command_template = "/sbin/chkconfig %s on"
        errors = self.apply_action(command_template, service)
        _ = self.apply_action("/sbin/chkconfig --list %s",  service)
        return errors

    def disable(self, service):
        """
        Disables a specified service.  If no service is specified, all services
        listed in self.valid_services will be disabled.

        @type service: string
        @param service: the service to disable

        @return: 0 for success, integer describing number of errors otherwise
        """
        command_template = "/sbin/chkconfig %s off"
        errors = self.apply_action(command_template, service)
        _ = self.apply_action("/sbin/chkconfig --list %s",  service)
        return errors

    def status(self, service):
        """
        Reports the status of a specified service.  If no service is specified, 
        the status for all services listed in self.valid_services will be 
        reported.

        @type service: string
        @param service: the service that will have its status checked and 
        reported.

        @return: 0 for success, integer describing number of errors otherwise
        """

        command_template = "/sbin/service %s status"
        errors = self.apply_action(command_template, service)

        return errors

    def list(self):
        """
        Prints a list of all services specified in self.valid_services.

        @return: 0
        """

        print "Configured services:"
        for service in self.valid_services:
            print "    %s" % service

        return 0

    def apply_action(self, command_template, service):
        """
        Each "action" function creates a template of a command and passes the 
        template and an optional service name to this function.  This function
        performs the requested action on the specified service.  If no service
        is specified, then the requested action will be applied to all services
        listed in self.valid_services.

        @type command_template: string
        @param command_template: the template for the action which will be 
        applied to the services
        @type service: string
        @param service: the service to start

        @return: 0 for success, integer describing number of errors otherwise
        """
        result_dict = {}
        errors = 0
        if service:
            command = command_template % service
            cmd = command.split()
            try:
                output = check_output(cmd)
                self.pretty_print(command, output)

            except CalledProcessError, cpe:
                self.pretty_print(command, cpe.output)
                errors += 1
        else: 
            # no service specified, so we will loop through all valid services 
            # and apply the action to each one
            for s in self.valid_services:
                command = command_template % s
                cmd = command.split()
                try:
                    output = check_output(cmd)
                    self.pretty_print(command, output)

                except CalledProcessError, cpe:
                    self.pretty_print(command, cpe.output)
                    errors += 1
            return errors

    def pretty_print(self, command, output):
        """
        This function is a really simple output formatter for the action output.
        All formatted output is printed to stdout.

        @type command: string
        @param command: The command that produced the output 
        applied to the services
        @type output: string
        @param output: Output to format
        """
        print "%s:" % command
        output = output.split("\n")
        for line in output:
            print "    %s" % line

def main():
    return_code = 0
    options = InstallOptions()
    try:
        # call out to osg-configure to get the list of configured services
        options.parse()
        action = options.service_action
        service = options.service_name
        services = Services(options.valid_services)

        if action == "list":
            return_code = services.list()
        elif action == "enable":
            return_code = services.enable(service)
        elif action == "disable":
            return_code = services.disable(service)
        elif action == "start":
            return_code = services.start(service)
        elif action == "stop":
            return_code = services.stop(service)
        elif action == "restart":
            return_code = services.restart(service)
        elif action == "status":
            return_code = services.status(service)

    except InvalidOptionError, ioe:
        options.print_help()
        print >> sys.stderr, "\nERROR: " + str(ioe)
        return_code = 1

    return return_code

if __name__ == "__main__":
    sys.exit(main())
